// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	Working(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*Reply, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Working(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pb.Worker/Working", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	Working(context.Context, *WorkRequest) (*Reply, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) Working(context.Context, *WorkRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Working not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Working_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Working(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Working",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Working(ctx, req.(*WorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Working",
			Handler:    _Worker_Working_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/grpc_try.proto",
}

// BalancerClient is the client API for Balancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalancerClient interface {
	Working(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*Reply, error)
	WorkerRegister(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*Reply, error)
	WorkerAlive(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*Reply, error)
}

type balancerClient struct {
	cc grpc.ClientConnInterface
}

func NewBalancerClient(cc grpc.ClientConnInterface) BalancerClient {
	return &balancerClient{cc}
}

func (c *balancerClient) Working(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pb.Balancer/Working", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancerClient) WorkerRegister(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pb.Balancer/WorkerRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancerClient) WorkerAlive(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pb.Balancer/WorkerAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalancerServer is the server API for Balancer service.
// All implementations must embed UnimplementedBalancerServer
// for forward compatibility
type BalancerServer interface {
	Working(context.Context, *WorkRequest) (*Reply, error)
	WorkerRegister(context.Context, *WorkerRequest) (*Reply, error)
	WorkerAlive(context.Context, *WorkerRequest) (*Reply, error)
	mustEmbedUnimplementedBalancerServer()
}

// UnimplementedBalancerServer must be embedded to have forward compatible implementations.
type UnimplementedBalancerServer struct {
}

func (UnimplementedBalancerServer) Working(context.Context, *WorkRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Working not implemented")
}
func (UnimplementedBalancerServer) WorkerRegister(context.Context, *WorkerRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerRegister not implemented")
}
func (UnimplementedBalancerServer) WorkerAlive(context.Context, *WorkerRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerAlive not implemented")
}
func (UnimplementedBalancerServer) mustEmbedUnimplementedBalancerServer() {}

// UnsafeBalancerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalancerServer will
// result in compilation errors.
type UnsafeBalancerServer interface {
	mustEmbedUnimplementedBalancerServer()
}

func RegisterBalancerServer(s grpc.ServiceRegistrar, srv BalancerServer) {
	s.RegisterService(&_Balancer_serviceDesc, srv)
}

func _Balancer_Working_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancerServer).Working(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Balancer/Working",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancerServer).Working(ctx, req.(*WorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balancer_WorkerRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancerServer).WorkerRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Balancer/WorkerRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancerServer).WorkerRegister(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balancer_WorkerAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancerServer).WorkerAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Balancer/WorkerAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancerServer).WorkerAlive(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Balancer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Balancer",
	HandlerType: (*BalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Working",
			Handler:    _Balancer_Working_Handler,
		},
		{
			MethodName: "WorkerRegister",
			Handler:    _Balancer_WorkerRegister_Handler,
		},
		{
			MethodName: "WorkerAlive",
			Handler:    _Balancer_WorkerAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/grpc_try.proto",
}
